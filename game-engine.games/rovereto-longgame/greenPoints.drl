package eu.trentorise.game.model

global Integer green_walk_points;
global Integer green_bike_points;
global Integer green_sustainable_bonus;
global Integer recommendation_bonus;
global Integer green_bus_points_base;
global Integer green_bus_points_step1;
global Integer green_bus_points_step2;
global Integer green_train_points_base;
global Integer green_train_points_step1;
global Integer green_train_points_step2;
global Integer zero_impact_booster;

global Double bus_threshold_step1;
global Double bus_threshold_step2;
global Double train_threshold_step1;
global Double train_threshold_step2;
global Double walk_min;
global Double walk_max;
global Double bike_max;


declare PRItinerary end

declare PointDelta
	delta : long
	pointType : String
end

rule "bus update green points"
when
	InputData($bus : data["busDistance"])
	$pc : PointConcept(name == "green leaves")
then
	if ($bus != null) {
		log("apply \'bus update green points\'");	
		Long busDistance = Math.round((Double) $bus);
		Integer busPoints;
		if (busDistance > bus_threshold_step1 && busDistance <= bus_threshold_step2)
			busPoints = green_bus_points_step1;
		else if (busDistance > bus_threshold_step2)
			busPoints = green_bus_points_step2;
		else 
			busPoints = green_bus_points_base;
		
		$pc.setScore($pc.getScore() + busPoints);
		update($pc);
		insert(new PointDelta(busPoints,"green leaves")); 
	}
end

rule "train update green points"
when
	InputData($train : data["trainDistance"])
	$pc : PointConcept(name == "green leaves")
then
	if ($train != null) {
		log("apply \'train update green points\'");	
		Long trainDistance = Math.round((Double) $train);
		Integer trainPoints;
		if (trainDistance > train_threshold_step1 && trainDistance <= train_threshold_step2)
			trainPoints = green_train_points_step1;
		else if (trainDistance > train_threshold_step2)
			trainPoints = green_train_points_step2;
		else 
			trainPoints = green_train_points_base;
		
		$pc.setScore($pc.getScore() + trainPoints);
		update($pc);
		insert(new PointDelta(trainPoints,"green leaves")); 
	}
end

rule "0-impact update green points"
when
	InputData($bike : data["bikeDistance"], $walk : data["walkDistance"], $bus : data["busDistance"], $train : data["trainDistance"], $car : data["carDistance"])
	$pc : PointConcept( name == "green leaves")
then
	boolean zeroImpact = ($walk != null || $bike != null) && (($bus == null || ((Double)$bus) == 0) &&  ($car == null || ((Double)$car) == 0) && ($train == null || ((Double)$train) == 0));
	
	Double walkDistance = $walk != null ? (Double) $walk : 0;
	walkDistance = walkDistance < walk_min ? 0 : walkDistance;
	walkDistance = walkDistance > walk_max ? walk_max : walkDistance;
	
	Double bikeDistance = $bike != null ? (Double) $bike : 0;
	bikeDistance = bikeDistance > bike_max ? bike_max : bikeDistance;
	
	Long score = Math.round(walkDistance * green_walk_points)  + Math.round(bikeDistance * green_bike_points) ;
	score = zeroImpact ? score * zero_impact_booster : score; 
	$pc.setScore($pc.getScore() + score);
	update($pc);
	insert(new PointDelta(score,"green leaves"));
end

rule "green sustainable bonus"
	salience 1
when
    InputData(data['sustainable'] == true)
    $pc : PointConcept(name == "green leaves")
then
	log("apply \'green sustainable bonus\'");
	$pc.setScore($pc.getScore() + green_sustainable_bonus);
    update($pc);
    insert(new PointDelta(green_sustainable_bonus,"green leaves")); 
end

rule "recommendation bonus"
	salience 1
when
	Action ($id : id == "app_sent_recommandation")
    $pc : PointConcept(name == "green leaves")
then
	log("apply \'recommendation bonus\'");
	$pc.setScore($pc.getScore() + recommendation_bonus);
    update($pc);
    insert(new PointDelta(recommendation_bonus,"green leaves")); 
end

